reg<-lm(lcavol ~ 1, data=pro);
cat("k = 0", "\n");
cat(sum(reg$residuals^2)); cat("\n");
cat("--\n\n")
#k=1
for (k in 2:9){
res_min = 1000
reg<-lm(lcavol ~ pro[,k])
if(sum(reg$residuals^2)<res_min){
res_min = sum(reg$residuals^2)
min = k
}
}
cat("k = 1", "\n");
cat(res_min); cat("\n");
cat(names(pro)[min]); cat("\n\n")
#k from 2 to 8
for(k in 2:8){
res_min = 1000
cb = combn(9,k)
for (i in 1:dim(cb)[2]){
c<-cb[,i]
reg<-lm(lcavol ~ .,data=pro[,c])
if(sum(reg$residuals^2)<res_min){
res_min = sum(reg$residuals^2)
min = c
}
}
cat("k = ", k, "\n");
cat(res_min); cat("\n");
cat(names(pro)[min]); cat("\n\n")
}
ress = c()
#k=0
reg<-lm(lcavol ~ 1, data=pro);
ress = c(ress, sum(reg$residuals^2))
cat("k = 0", "\n");
cat(sum(reg$residuals^2)); cat("\n");
cat("--\n\n")
#k=1
for (k in 2:9){
res_min = 1000
reg<-lm(lcavol ~ pro[,k])
if(sum(reg$residuals^2)<res_min){
res_min = sum(reg$residuals^2)
min = k
}
}
ress = c(ress, sum(reg$residuals^2))
cat("k = 1", "\n");
cat(res_min); cat("\n");
cat(names(pro)[min]); cat("\n\n")
#k from 2 to 8
for(k in 2:8){
res_min = 1000
cb = combn(9,k)
for (i in 1:dim(cb)[2]){
c<-cb[,i]
reg<-lm(lcavol ~ .,data=pro[,c])
if(sum(reg$residuals^2)<res_min){
res_min = sum(reg$residuals^2)
min = c
}
}
ress = c(ress, sum(reg$residuals^2))
cat("k = ", k, "\n");
cat(res_min); cat("\n");
cat(names(pro)[min]); cat("\n\n")
}
plot(ress)
lines(ress)
#plot(ress)
lines(ress)
plot(ress)
par(new=TRUE)
lines(ress)
plot(ress)
par(new=TRUE)
lines(ress)
set.seed(0)
n = 6000; m = 201
vect = rnorm(n*m)
m = matrix(vect,nrow = n, ncol = m)
d = as.data.frame(m)
reg<-lm(d$V1 ~ ., d)
summary(reg)$coefficients
knitr::opts_chunk$set(echo = TRUE)
set.seed(0)
n = 6000; m = 201
vect = rnorm(n*m)
m = matrix(vect,nrow = n, ncol = m)
d = as.data.frame(m)
reg<-lm(d$V1 ~ ., d)
summary(reg)$coefficients
summary(reg)$coefficients[summary(reg)$coefficients[,4]<=0.05,] #?? A VERIFIER
n = 1000
eps1 = rnorm(n)
eps2 = rnorm(n)
eps3 = rnorm(n)
x1 = eps1
x2 = 3*x1 + eps2
y = x1 + x2 + 2 + eps3
plot(x1,x2)
reg1 <- lm(y~x1)
summary(reg1)$coefficients
beta1 = summary(reg1)$coefficients[2,1]; beta1
beta0 = summary(reg1)$coefficients[1,1]; beta0
sigmat1 = summary(reg1)$coefficients[1,2]; sigmat1 #?? (A VERIFIER)
reg2 <- lm(y~x2)
summary(reg2)$coefficients
beta2 = summary(reg2)$coefficients[2,1]; beta2
sigmat2 = summary(reg2)$coefficients[1,2]; sigmat2
set.seed(3)
n = 10
eps1 = rnorm(n)
eps2 = rnorm(n)
eps3 = rnorm(n)
x1 = eps1
x2 = 3*x1 + eps2
y = x1 + x2 + 2 + eps3
reg1 <- lm(y~x1)
beta1 = summary(reg1)$coefficients[2,1]; beta1
beta0 = summary(reg1)$coefficients[1,1]; beta0
sigmat1 = summary(reg1)$coefficients[1,2]; sigmat1
reg2 <- lm(y~x2)
beta2 = summary(reg2)$coefficients[2,1]; beta2
sigmat2 = summary(reg2)$coefficients[1,2]; sigmat2
reg3 = lm(y~x1+x2)
#summary(reg3)
beta2 = summary(reg3)$coefficients[3,1]; beta2
beta1 = summary(reg3)$coefficients[2,1]; beta1
beta0 = summary(reg3)$coefficients[1,1]; beta0
sigma = summary(reg3)$coefficients[1,2]; sigma
prostateCancer<-read.table("./prostate.data",header=T);
attach(prostateCancer)
pro <- prostateCancer[1:9]
pairs(pro)
pro$gleason<-factor(pro$gleason)
pro$svi<-factor(pro$svi)
reg <- lm(pro$lcavol ~., pro)
summary(reg)
confint(reg)
reg_lpsa <- lm(pro$lcavol ~lpsa)
summary(reg_lpsa)$coefficients
confint(reg_lpsa)
plot(pro$lcavol, reg$fitted.values)
hist(reg$residuals, prob=TRUE)
norm <- function(x){
return (dnorm(x, sd = sd(reg$residuals)))
}
par(new=TRUE)
curve(norm(x), add=TRUE)
sum(reg$residuals^2)
reg_f = lm(pro$lcavol ~ pro$lweight + pro$age + pro$lbph + pro$svi + pro$gleason + pro$pgg45)
summary(reg_f)
plot(pro$lcavol, reg_f$fitted.values)
aov_svi<-aov(pro$lcavol~pro$svi, pro); summary(aov_svi)
aov_gleason<-aov(pro$lcavol~pro$gleason, pro); summary(aov_gleason)
avo2 <-aov(pro$lcavol~pro$gleason*pro$svi, pro); summary(avo2)
reg1<-lm(lcavol ~ 1, data=pro)
reg2<-lm(lcavol ~ .,data=pro[,c(1,4,9)])
reg3<-lm(lcavol ~ ., data=pro[,c(1,2,9)])
sum(reg1$residuals^2)
sum(reg2$residuals^2)
sum(reg3$residuals^2)
res_min = 1000
cb = combn(9,2)
for (i in 1:dim(cb)[2]){
c<-cb[,i]
reg<-lm(lcavol ~ .,data=pro[,c])
if(sum(reg$residuals^2)<res_min){
res_min = sum(reg$residuals^2)
min = c
}
}
cat(res_min); cat("\n"); cat(names(pro)[min]); cat("\n")
ress = c()
#k=0
reg<-lm(lcavol ~ 1, data=pro);
ress = c(ress, sum(reg$residuals^2))
cat("k = 0", "\n");
cat(sum(reg$residuals^2)); cat("\n");
cat("--\n\n")
#k=1
for (k in 2:9){
res_min = 1000
reg<-lm(lcavol ~ pro[,k])
if(sum(reg$residuals^2)<res_min){
res_min = sum(reg$residuals^2)
min = k
}
}
ress = c(ress, sum(reg$residuals^2))
cat("k = 1", "\n");
cat(res_min); cat("\n");
cat(names(pro)[min]); cat("\n\n")
#k from 2 to 8
for(k in 2:8){
res_min = 1000
cb = combn(9,k)
for (i in 1:dim(cb)[2]){
c<-cb[,i]
reg<-lm(lcavol ~ .,data=pro[,c])
if(sum(reg$residuals^2)<res_min){
res_min = sum(reg$residuals^2)
min = c
}
}
ress = c(ress, sum(reg$residuals^2))
cat("k = ", k, "\n");
cat(res_min); cat("\n");
cat(names(pro)[min]); cat("\n\n")
}
plot(ress)
par(new=TRUE)
lines(ress)
mySpecs <- combn(names(pro[,-1]), 2, FUN=function(x) reformulate(x, "lcavol"), simplify=FALSE)
myRegs = lapply(mySpecs, function(i) lm(i))
fittedval = lapply(myRegs, function(i) i$fitted.values)
RSQ = lapply(fittedval , function(i) mean(lcavol - i)^2)
indexmin = which.min(unlist(RSQ))
cat("the model with small RSQ is ", as.character(mySpecs[indexmin]))
knitr::opts_chunk$set(echo = TRUE)
set.seed(0)
matrice = matrix(rnorm(201 * 6000, mean = 0, sd = 1), 201, 6000)
dataFrame = as.data.frame(t(matrice))
# Each of these columns is referred to as a “variable”
for (i in 1:201)
{
colnames(dataFrame)[i] <- paste("variable", i, sep="")
}
# we can use variable1 instead of dataFrame$variable1
reg <- lm(dataFrame$variable1 ~ .,dataFrame[,-1])
# The number of coefficients assessed as significantly non-zero at level 5%
x<-summary(reg)$coefficients
a = (0<x[,4] & x[,4]<=0.05)
cat("The number of coefficients assessed as significantly non-zero at level 5% is :\n", sum(a), "coefficients")
data <- function(n)
{
eps1 <<- rnorm(n)
eps2 <<- rnorm(n)
eps3 <<- rnorm(n)
x1 <<- eps1
x2 <<- 3*x1 + eps2
y <<- x1 + x2 + 2 + eps3
}
n = 1000
data(n)
plot(x1, x2, main="Cloud of points", xlab="X1", ylab="X2")
reg<-lm(x2~x1)
lines(x1, fitted.values(reg))
cat("the shape is a line with a slope of : ", reg$coefficients[2])
simulate <- function()
{
# plotting 2 grahs at the same line
par(mfcol=c(1,2))
# Model 1
reg1 <- lm(y~x1)
# coefficients
beta0 = summary(reg1)$coefficients[1];
beta1 = summary(reg1)$coefficients[2];
sigma2 = summary(reg1)$sigma^2;
cat("Estimated coefficients in Model 1:\n")
cat("beta0 = ", beta0, "\n")
cat("beta1 = ", beta1, "\n")
cat("sigma2 = ", sigma2, "\n")
# Model 2
reg2 <- lm(y~x2)
# coefficients
beta0 = summary(reg2)$coefficients[1];
beta1 = summary(reg2)$coefficients[2];
sigma2 = summary(reg2)$sigma^2;
cat("\nEstimated coefficients in Model 2:\n")
cat("beta0 = ", beta0, "\n")
cat("beta1 = ", beta1, "\n")
cat("sigma2 = ", sigma2, "\n")
# visualizations
plot(x1, y, main="Cloud of points : Model 1", xlab="X1", ylab="Y")
lines(x1, fitted.values(reg1))
plot(x2, y, main="Cloud of points : Model 2", xlab="X2", ylab="Y")
lines(x2, fitted.values(reg2))
}
simulate()
set.seed(3)
n = 10
data(n)
simulate()
# Model 3
reg3 <- lm(y~x1+x2)
# coefficients
beta0 = summary(reg3)$coefficients[1]
beta1 = summary(reg3)$coefficients[2]
beta2 = summary(reg3)$coefficients[3]
sigma2 = summary(reg3)$sigma^2;
p1 = summary(reg3)$coefficients[2,4]
p2 = summary(reg3)$coefficients[3,4]
cat("\nEstimated coefficients in Model 3:\n")
cat("beta0 = ", beta0, "\n", "beta1 = ", beta1, "\n", "beta2 = ", beta2, "\n", "sigma2 = ", sigma2, "\n", "p_value_X1 = ", p1, "\n", "p_value_X2 = ", p2, "\n")
prostateCancer<-read.table("./prostate.data",header=T);
attach(prostateCancer)
pro <- prostateCancer[,-10]
#visualization
pairs(pro)
#numerical solution
corr <- c(0)
y <- pro$lcavol
for (i in 2:9)
{
x <- pro[,i]
reg <- lm(y~x)
corr[i] <- summary(reg)$r.squared
}
# visualization or names(pro)[corr>0.2]
barplot(corr[-1],beside=T,col=c("#F7D358"),ylab="Correlation", names = names(pro)[-1])
# Our qualitative variables
pro$gleason<-factor(pro$gleason)
pro$svi<-factor(pro$svi)
# Multiple regression
reg <- lm(pro$lcavol ~., pro[, -1])
summary(reg)
confint(reg)
reg_lpsa <- lm(pro$lcavol ~lpsa)
summary(reg_lpsa)$coefficients
confint(reg_lpsa)
plotting <- function(){
plot(pro$lcavol, reg$fitted.values, col="blue" ,xlab="Actual Values", ylab="Predicted Values")
hist(reg$residuals, col = "green", border = "red", freq=FALSE , xlab= "", ylab="", main=" Histogram of residuals")
norm <- function(x){
return (dnorm(x, sd = sd(reg$residuals)))
}
par(new=TRUE)
curve(norm(x), add=TRUE)
}
plotting()
cat("The residual sum of squares : ", sum(reg$residuals^2), "\n")
knitr::opts_chunk$set(echo = TRUE)
set.seed(0)
matrice = matrix(rnorm(201 * 6000, mean = 0, sd = 1), 201, 6000)
dataFrame = as.data.frame(t(matrice))
# Each of these columns is referred to as a “variable”
for (i in 1:201)
{
colnames(dataFrame)[i] <- paste("variable", i, sep="")
}
# we can use variable1 instead of dataFrame$variable1
reg <- lm(dataFrame$variable1 ~ .,dataFrame[,-1])
# The number of coefficients assessed as significantly non-zero at level 5%
x<-summary(reg)$coefficients
a = (0<x[,4] & x[,4]<=0.05)
cat("The number of coefficients assessed as significantly non-zero at level 5% is :\n", sum(a), "coefficients")
data <- function(n)
{
eps1 <<- rnorm(n)
eps2 <<- rnorm(n)
eps3 <<- rnorm(n)
x1 <<- eps1
x2 <<- 3*x1 + eps2
y <<- x1 + x2 + 2 + eps3
}
n = 1000
data(n)
plot(x1, x2, main="Cloud of points", xlab="X1", ylab="X2")
reg<-lm(x2~x1)
lines(x1, fitted.values(reg))
cat("the shape is a line with a slope of : ", reg$coefficients[2])
simulate <- function()
{
# plotting 2 grahs at the same line
par(mfcol=c(1,2))
# Model 1
reg1 <- lm(y~x1)
# coefficients
beta0 = summary(reg1)$coefficients[1];
beta1 = summary(reg1)$coefficients[2];
sigma2 = summary(reg1)$sigma^2;
cat("Estimated coefficients in Model 1:\n")
cat("beta0 = ", beta0, "\n")
cat("beta1 = ", beta1, "\n")
cat("sigma2 = ", sigma2, "\n")
# Model 2
reg2 <- lm(y~x2)
# coefficients
beta0 = summary(reg2)$coefficients[1];
beta1 = summary(reg2)$coefficients[2];
sigma2 = summary(reg2)$sigma^2;
cat("\nEstimated coefficients in Model 2:\n")
cat("beta0 = ", beta0, "\n")
cat("beta1 = ", beta1, "\n")
cat("sigma2 = ", sigma2, "\n")
# visualizations
plot(x1, y, main="Cloud of points : Model 1", xlab="X1", ylab="Y")
lines(x1, fitted.values(reg1))
plot(x2, y, main="Cloud of points : Model 2", xlab="X2", ylab="Y")
lines(x2, fitted.values(reg2))
}
simulate()
set.seed(3)
n = 10
data(n)
simulate()
# Model 3
reg3 <- lm(y~x1+x2)
# coefficients
beta0 = summary(reg3)$coefficients[1]
beta1 = summary(reg3)$coefficients[2]
beta2 = summary(reg3)$coefficients[3]
sigma2 = summary(reg3)$sigma^2;
p1 = summary(reg3)$coefficients[2,4]
p2 = summary(reg3)$coefficients[3,4]
cat("\nEstimated coefficients in Model 3:\n")
cat("beta0 = ", beta0, "\n", "beta1 = ", beta1, "\n", "beta2 = ", beta2, "\n", "sigma2 = ", sigma2, "\n", "p_value_X1 = ", p1, "\n", "p_value_X2 = ", p2, "\n")
prostateCancer<-read.table("./prostate.data",header=T);
attach(prostateCancer)
pro <- prostateCancer[,-10]
#visualization
pairs(pro)
#numerical solution
corr <- c(0)
y <- pro$lcavol
for (i in 2:9)
{
x <- pro[,i]
reg <- lm(y~x)
corr[i] <- summary(reg)$r.squared
}
# visualization or names(pro)[corr>0.2]
barplot(corr[-1],beside=T,col=c("#F7D358"),ylab="Correlation", names = names(pro)[-1])
# Our qualitative variables
pro$gleason<-factor(pro$gleason)
pro$svi<-factor(pro$svi)
# Multiple regression
reg <- lm(pro$lcavol ~., pro[, -1])
summary(reg)
confint(reg)
reg_lpsa <- lm(pro$lcavol ~lpsa)
summary(reg_lpsa)$coefficients
confint(reg_lpsa)
plotting <- function(){
plot(pro$lcavol, reg$fitted.values, col="blue" ,xlab="Actual Values", ylab="Predicted Values")
hist(reg$residuals, col = "green", border = "red", freq=FALSE , xlab= "", ylab="", main=" Histogram of residuals")
norm <- function(x){
return (dnorm(x, sd = sd(reg$residuals)))
}
par(new=TRUE)
curve(norm(x), add=TRUE)
}
plotting()
cat("The residual sum of squares : ", sum(reg$residuals^2), "\n")
reg = lm(pro$lcavol ~ pro$lweight + pro$age + pro$lbph + pro$svi + pro$gleason + pro$pgg45)
summary(reg)
plotting()
aov_svi<-aov(pro$lcavol~pro$svi, pro); summary(aov_svi)
aov_gleason<-aov(pro$lcavol~pro$gleason, pro); summary(aov_gleason)
avo2 <-aov(pro$lcavol~pro$gleason*pro$svi, pro); summary(avo2)
reg1<-lm(lcavol ~ 1, data=pro)
reg2<-lm(lcavol ~ .,data=pro[,c(1,4,9)])
reg3<-lm(lcavol ~ ., data=pro[,c(1,2,9)])
sum(reg1$residuals^2)
sum(reg2$residuals^2)
sum(reg3$residuals^2)
res_min = 1000
cb = combn(9,2)
for (i in 1:dim(cb)[2]){
c<-cb[,i]
reg<-lm(lcavol ~ .,data=pro[,c])
if(sum(reg$residuals^2)<res_min){
res_min = sum(reg$residuals^2)
min = c
}
}
cat(res_min); cat("\n"); cat(names(pro)[min]); cat("\n")
ress = c()
#k=0
reg<-lm(lcavol ~ 1, data=pro);
ress = c(ress, sum(reg$residuals^2))
cat("k = 0", "\n");
cat(sum(reg$residuals^2)); cat("\n");
cat("--\n\n")
#k=1
for (k in 2:9){
res_min = 1000
reg<-lm(lcavol ~ pro[,k])
if(sum(reg$residuals^2)<res_min){
res_min = sum(reg$residuals^2)
min = k
}
}
ress = c(ress, sum(reg$residuals^2))
cat("k = 1", "\n");
cat(res_min); cat("\n");
cat(names(pro)[min]); cat("\n\n")
#k from 2 to 8
for(k in 2:8){
res_min = 1000
cb = combn(9,k)
for (i in 1:dim(cb)[2]){
c<-cb[,i]
reg<-lm(lcavol ~ .,data=pro[,c])
if(sum(reg$residuals^2)<res_min){
res_min = sum(reg$residuals^2)
min = c
}
}
ress = c(ress, sum(reg$residuals^2))
cat("k = ", k, "\n");
cat(res_min); cat("\n");
cat(names(pro)[min]); cat("\n\n")
}
plot(ress)
par(new=TRUE)
lines(ress)
3+6
